/**
 * Screen Drawing with F12 Keypress
 * @author Tur24Tur / BugBountyzip (https://github.com/BugBountyzip)
 * Press F12 to enable drawing, hold F12 to clear the drawing, and press F12 again to disable it.
 **/
if (started) {
    return true;
}

java.awt.EventQueue.invokeLater(() -> {
    javax.swing.JFrame targetWindow = (javax.swing.JFrame) java.util.Arrays.stream(java.awt.Window.getWindows())
        .filter(window -> window instanceof javax.swing.JFrame && window.isVisible())
        .findFirst()
        .orElse(null);

    if (targetWindow == null) {
        return;
    }

    class DrawingPanel extends javax.swing.JPanel {
        private java.util.List<java.awt.Point> points = new java.util.ArrayList<>();
        private boolean isDrawing = false;
        private java.awt.Point lastPoint;

        public DrawingPanel() {
            setOpaque(false);
            addMouseListener(new java.awt.event.MouseAdapter() {
                public void mousePressed(java.awt.event.MouseEvent e) {
                    if (isDrawing) {
                        lastPoint = e.getPoint();
                    }
                }
                public void mouseReleased(java.awt.event.MouseEvent e) {
                    if (isDrawing) {
                        points.add(null); // add null to separate lines
                    }
                }
            });
            addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                public void mouseDragged(java.awt.event.MouseEvent e) {
                    if (isDrawing) {
                        points.add(e.getPoint());
                        repaint();
                        lastPoint = e.getPoint();
                    }
                }
            });
        }

        @Override
        protected void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);
            java.awt.Graphics2D g2d = (java.awt.Graphics2D) g.create();
            g2d.setColor(java.awt.Color.RED);
            g2d.setStroke(new java.awt.BasicStroke(3));

            java.awt.Point prevPoint = null;
            for (java.awt.Point point : points) {
                if (prevPoint != null && point != null) {
                    g2d.drawLine(prevPoint.x, prevPoint.y, point.x, point.y);
                }
                prevPoint = point;
            }

            if (isDrawing && lastPoint != null) {
                g2d.fillOval(lastPoint.x - 5, lastPoint.y - 5, 10, 10);
            }

            g2d.dispose();
        }
                            //fixed the bug here 
        public void toggleDrawing() {
            isDrawing = !isDrawing;
            if (!isDrawing) {
                lastPoint = null;
            }
            setCursor(isDrawing ? java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.CROSSHAIR_CURSOR) : java.awt.Cursor.getDefaultCursor());
            setVisible(isDrawing);
        }

        public void clear() {
            points.clear();
            repaint();
        }
    }

    DrawingPanel drawingPanel = new DrawingPanel();
    targetWindow.setGlassPane(drawingPanel);

    javax.swing.Timer clearTimer = new javax.swing.Timer(500, e -> drawingPanel.clear());
    clearTimer.setRepeats(false);

    targetWindow.getRootPane().getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW)
        .put(javax.swing.KeyStroke.getKeyStroke("pressed F12"), "startClear");
    targetWindow.getRootPane().getActionMap().put("startClear", new javax.swing.AbstractAction() {
        @Override
        public void actionPerformed(java.awt.event.ActionEvent e) {
            clearTimer.start();
        }
    });

    targetWindow.getRootPane().getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW)
        .put(javax.swing.KeyStroke.getKeyStroke("released F12"), "toggleOrStopClear");
    targetWindow.getRootPane().getActionMap().put("toggleOrStopClear", new javax.swing.AbstractAction() {
        @Override
        public void actionPerformed(java.awt.event.ActionEvent e) {
            if (clearTimer.isRunning()) {
                clearTimer.stop();
                drawingPanel.toggleDrawing();
            }
        }
    });
});

started = true;
return true;
}

boolean started = false;
{
